//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Services/Input/InputSystem/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BreakingRat.Infrastructure.Services.Input.InputSystem
{
    public partial class @PlayerControl : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""ScreenInput"",
            ""id"": ""80d92583-6c21-49fe-a92e-29d2ea44db1d"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""0ece4673-c228-48fe-bf9d-505164e30084"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.02)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c9ff678-4c6a-4de5-a9b8-6b0849f02a86"",
                    ""path"": ""<Touchscreen>/primaryTouch/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e6b071e1-006f-4c17-818c-f37e9406a90f"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=1000)"",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""7f021d41-4c8f-4d41-9883-c4e8a7adf165"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""6d3ed33b-98d3-422b-840c-a653a65725e2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ScreenInput
            m_ScreenInput = asset.FindActionMap("ScreenInput", throwIfNotFound: true);
            m_ScreenInput_Turn = m_ScreenInput.FindAction("Turn", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ScreenInput
        private readonly InputActionMap m_ScreenInput;
        private IScreenInputActions m_ScreenInputActionsCallbackInterface;
        private readonly InputAction m_ScreenInput_Turn;
        public struct ScreenInputActions
        {
            private @PlayerControl m_Wrapper;
            public ScreenInputActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Turn => m_Wrapper.m_ScreenInput_Turn;
            public InputActionMap Get() { return m_Wrapper.m_ScreenInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ScreenInputActions set) { return set.Get(); }
            public void SetCallbacks(IScreenInputActions instance)
            {
                if (m_Wrapper.m_ScreenInputActionsCallbackInterface != null)
                {
                    @Turn.started -= m_Wrapper.m_ScreenInputActionsCallbackInterface.OnTurn;
                    @Turn.performed -= m_Wrapper.m_ScreenInputActionsCallbackInterface.OnTurn;
                    @Turn.canceled -= m_Wrapper.m_ScreenInputActionsCallbackInterface.OnTurn;
                }
                m_Wrapper.m_ScreenInputActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Turn.started += instance.OnTurn;
                    @Turn.performed += instance.OnTurn;
                    @Turn.canceled += instance.OnTurn;
                }
            }
        }
        public ScreenInputActions @ScreenInput => new ScreenInputActions(this);
        public interface IScreenInputActions
        {
            void OnTurn(InputAction.CallbackContext context);
        }
    }
}
